package com.capg.main.controller;

import java.util.Arrays;


import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.capg.main.entity.Orders;
import com.capg.main.entity.Product;
import com.capg.main.service.OrderService;

@RestController
@RequestMapping("/order")
@Component
@ComponentScan("com.capg.main")
public class OrderController {
	@Autowired
	private OrderService service;
	
	@Autowired
	public RestTemplate restTemplate;
	
	
	//REST TEMPLATE CONFIGURATION
	
	@GetMapping("/getproduct/oid/{oid}")
	//@PreAuthorize("hasAnyRole('ADMIN','MODERATOR')")
	
	public	List<Product> getProductByOrderId(@PathVariable("oid") String oid)
	{
		
		ResponseEntity<List<Product>> productResponse =  restTemplate.exchange("http://product-service-catalog/product/get/"+oid,HttpMethod.GET, null, new ParameterizedTypeReference<List<Product>>() {});	
		
		List<Product> product = productResponse.getBody();
		return  product;
	}
	
	
	
	//ResponseEntity Configuration
	
	@GetMapping("/getall")
	public List<Orders> getOrder(){
		return service.getOrder();
	}
	
	@GetMapping("/get/{id}")
	public ResponseEntity<Object> getUserDetailsById(@PathVariable("id") String id)  {
			Orders pro= service.findById(id);
			if(pro==null)
				return new ResponseEntity<Object>("Order Data not found",HttpStatus.EXPECTATION_FAILED);
			return new ResponseEntity<Object>(pro,HttpStatus.OK);
		}
	@PostMapping("/registerorder")
	public ResponseEntity<String> insertUser(@RequestBody Orders ord) {
		System.out.println("Order Done");
		service.addOrder(ord);
		return new ResponseEntity<String>("Success", HttpStatus.OK);
	}
	
	@PutMapping("/updateorder/{id}")
	public ResponseEntity<Object> UpdateUserById1(@PathVariable("id") String  id, @RequestBody Orders ord) {
		Optional<Orders> op = service.findById1(id);
		if (op.isPresent()) {
			Orders us = op.get();
			
			us.setProductName(ord.getProductName());
			us.setPrice(ord.getPrice());
			us.setCustomerName(ord.getCustomerName());
			us.setCustomerAddress(ord.getCustomerAddress());
			us.setoDate(ord.getoDate());
			service.save(us);
			return new ResponseEntity<Object>(us, HttpStatus.OK);
		} else {
			return new ResponseEntity<Object>("Not updated successfully", HttpStatus.NOT_FOUND);
		}
	}
	@DeleteMapping("/deleteorder/{id}")
	public ResponseEntity<String> deleteproductById(@PathVariable("id") String id){
		Optional<Orders> op= service.findById1(id);
		if(op.isPresent())
		{
			service.deleteById(id);
		return new ResponseEntity<String>("Order is Deleted successfully", HttpStatus.OK);
		}
		else
			return new ResponseEntity<String>("Order Not Found",HttpStatus.EXPECTATION_FAILED);
	}
	
}